{"config":{"lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Titan \u00b6 Prometheus monitoring for shiny applications, plumber APIs, and other R web services. Monitoring Get Started Acknowledgement \u00b6 I have put this package together in order to 1) grasp a better understanding of Prometheus metrics and 2) have some direct control over the source code of software I deploy for clients. I have written and re-written this three times before discovering openmetrics , an R package that provides the same functionalities. I have taken much inspiration from it. Info Prometheus is the titan god of fire. Related work \u00b6 There are other packages out there that will let you serve Prometheus metrics. openmetrics provides support for all metrics as well as authentication, and goes a step further in enforcing OpenMetrics standards. pRometheus Provides support for Gauge and Counter.","title":"Home"},{"location":"#titan","text":"Prometheus monitoring for shiny applications, plumber APIs, and other R web services. Monitoring Get Started","title":"Titan"},{"location":"#acknowledgement","text":"I have put this package together in order to 1) grasp a better understanding of Prometheus metrics and 2) have some direct control over the source code of software I deploy for clients. I have written and re-written this three times before discovering openmetrics , an R package that provides the same functionalities. I have taken much inspiration from it. Info Prometheus is the titan god of fire.","title":"Acknowledgement"},{"location":"#related-work","text":"There are other packages out there that will let you serve Prometheus metrics. openmetrics provides support for all metrics as well as authentication, and goes a step further in enforcing OpenMetrics standards. pRometheus Provides support for Gauge and Counter.","title":"Related work"},{"location":"about/internals/","text":"Internals \u00b6 This gives some details on the internals of titan that may be of use when using the package. Principle \u00b6 Titan aims not to make your service go down, the irony that would be\u2026 Therefore titan makes very little use of stop and instead uses warning starting in [IGNORING] and skips the action. Tip Warnings starting in [IGNORING] indicate actions being ignored, e.g.: metric not being set to given value. E.g.: One cannot decrease the value of Counters, if you try to do so Titan will return a warning and ignore the action but will not stop . Storage \u00b6 When titan is loaded in your environment with library(titan) it creates an environment in which it stores all metrics. This is useful when, for instance, you setup a shiny application with titan, run it locally with titanApp , test it, then stop the app to make changes; when you run it again the metrics from the previous run will remain. Info You can run cleanRegistry to clean the environment. Serving \u00b6 As mentioned Prometheus pulls the metrics from your service, therefore those metrics have to be made available. These are exposed in the form of a plain text ( text/plain ) endpoint called /metrics where titan will serve the metrics that Prometheus can then read, store, and analyse. With shiny you can use the function titanApp where you would normally use shinyApp , with plumber you can use prTitan where you would normally use pr , with Ambiorix, and other services you can use renderMetrics . There are more details and many examples on how to use this on this site.","title":"Internals"},{"location":"about/internals/#internals","text":"This gives some details on the internals of titan that may be of use when using the package.","title":"Internals"},{"location":"about/internals/#principle","text":"Titan aims not to make your service go down, the irony that would be\u2026 Therefore titan makes very little use of stop and instead uses warning starting in [IGNORING] and skips the action. Tip Warnings starting in [IGNORING] indicate actions being ignored, e.g.: metric not being set to given value. E.g.: One cannot decrease the value of Counters, if you try to do so Titan will return a warning and ignore the action but will not stop .","title":"Principle"},{"location":"about/internals/#storage","text":"When titan is loaded in your environment with library(titan) it creates an environment in which it stores all metrics. This is useful when, for instance, you setup a shiny application with titan, run it locally with titanApp , test it, then stop the app to make changes; when you run it again the metrics from the previous run will remain. Info You can run cleanRegistry to clean the environment.","title":"Storage"},{"location":"about/internals/#serving","text":"As mentioned Prometheus pulls the metrics from your service, therefore those metrics have to be made available. These are exposed in the form of a plain text ( text/plain ) endpoint called /metrics where titan will serve the metrics that Prometheus can then read, store, and analyse. With shiny you can use the function titanApp where you would normally use shinyApp , with plumber you can use prTitan where you would normally use pr , with Ambiorix, and other services you can use renderMetrics . There are more details and many examples on how to use this on this site.","title":"Serving"},{"location":"about/monitoring/","text":"About Titan & Monitoring \u00b6 Titan is an R package to allow generating Prometheus metrics for R projects, including shiny, plumber, ambiorix, and more. When products rely on plumber APIs and teams rely on shiny applications these better be up and running. These services may crash, become overloaded, their response latency might increase, they may run out of resources, and more. In addition these scale non-linearly as the number of such services or containers grow; hence monitoring their health and being alerted when they raise too many errors or crash becomes crucial. Prometheus is an open-source monitoring and alerting solution. There are other such monitoring tools out there such as Sensu , Nagios , or InfluxDB which also focus on time series data. Push vs. Pull \u00b6 Prometheus differs from other services in many ways but the most important one probably is the fact that it reads the metrics from services from an endpoint provided by said service; it pulls the data. Whereas many other solutions work the other way around; metrics are pushed to the service for monitoring. The latter has the disadvantage that a tiny mistake can result in too much data being pushed to the monitoring service thereby essentially DDoSing yourself. Another difference is that Prometheus is built with containers in mind (Docker & Kubernetes). Though fully open-sourced today, it was initially developed at Soundcloud which is a big advocate of and pioneer in using micro-services at scale. Black box vs. White box \u00b6 Up until recently most monitoring was probably \u201cblack box,\u201d applications were developed by some people and deployed by others. Devops had to set up monitoring of services with little knowledge of them. Nowadays, with the advent of micro-services where developers are responsible for the deployment of the apps they build, the industry is increasingly turning towards \u201cwhite box\u201d monitoring. Quote You build it you run it \u2013 Jeff Bezos As the developer of the service you know more about it than anyone and can therefore setup more appropriate monitoring; Prometheus and titan let you do just that. This is particularly relevant to R programmers, most of which actually have to deploy the services they build. It\u2019s not as daunting as it sounds, it\u2019s rather natural, and you quickly come to enjoy it, a bit like testthat in a sense. Scale \u00b6 Monitoring is often mentioned along with large-scale micro-services where it is absolutely necessary. But this is not the only time when monitoring is useful. Surely, as the developer of an application, you want to keep an eye on its performances. Perhaps you were given performance objectives, like reducing the load time of a shiny application or reducing the response time of a plumber API endpoint. Even at a small scale monitoring is interesting and useful. Set up alerts when your services go down and fix them before your boss learns about it via a client.","title":"Monitoring"},{"location":"about/monitoring/#about-titan-monitoring","text":"Titan is an R package to allow generating Prometheus metrics for R projects, including shiny, plumber, ambiorix, and more. When products rely on plumber APIs and teams rely on shiny applications these better be up and running. These services may crash, become overloaded, their response latency might increase, they may run out of resources, and more. In addition these scale non-linearly as the number of such services or containers grow; hence monitoring their health and being alerted when they raise too many errors or crash becomes crucial. Prometheus is an open-source monitoring and alerting solution. There are other such monitoring tools out there such as Sensu , Nagios , or InfluxDB which also focus on time series data.","title":"About Titan &amp; Monitoring"},{"location":"about/monitoring/#push-vs-pull","text":"Prometheus differs from other services in many ways but the most important one probably is the fact that it reads the metrics from services from an endpoint provided by said service; it pulls the data. Whereas many other solutions work the other way around; metrics are pushed to the service for monitoring. The latter has the disadvantage that a tiny mistake can result in too much data being pushed to the monitoring service thereby essentially DDoSing yourself. Another difference is that Prometheus is built with containers in mind (Docker & Kubernetes). Though fully open-sourced today, it was initially developed at Soundcloud which is a big advocate of and pioneer in using micro-services at scale.","title":"Push vs. Pull"},{"location":"about/monitoring/#black-box-vs-white-box","text":"Up until recently most monitoring was probably \u201cblack box,\u201d applications were developed by some people and deployed by others. Devops had to set up monitoring of services with little knowledge of them. Nowadays, with the advent of micro-services where developers are responsible for the deployment of the apps they build, the industry is increasingly turning towards \u201cwhite box\u201d monitoring. Quote You build it you run it \u2013 Jeff Bezos As the developer of the service you know more about it than anyone and can therefore setup more appropriate monitoring; Prometheus and titan let you do just that. This is particularly relevant to R programmers, most of which actually have to deploy the services they build. It\u2019s not as daunting as it sounds, it\u2019s rather natural, and you quickly come to enjoy it, a bit like testthat in a sense.","title":"Black box vs. White box"},{"location":"about/monitoring/#scale","text":"Monitoring is often mentioned along with large-scale micro-services where it is absolutely necessary. But this is not the only time when monitoring is useful. Surely, as the developer of an application, you want to keep an eye on its performances. Perhaps you were given performance objectives, like reducing the load time of a shiny application or reducing the response time of a plumber API endpoint. Even at a small scale monitoring is interesting and useful. Set up alerts when your services go down and fix them before your boss learns about it via a client.","title":"Scale"},{"location":"deploy/grafana/","text":"Grafana \u00b6 Prometheus does an amazing job of collecting metrics but the dashboard and tracking is provides is rather ugly. Grafana on the other make for great monitoring, dashboards, alerts, etc. Moreover it connects very easily with Prometheus; hence you leave prometheus collect the metrics and have Grafana read those metrics to provide monitoring. Install \u00b6 We can follow the official documentation to install grafana on Ubuntu 20 . 1 2 3 4 5 6 7 8 sudo apt-get install -y apt-transport-https sudo apt-get install -y software-properties-common wget wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add - echo \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list sudo apt-get update sudo apt-get install grafana Run \u00b6 Grafana actually create the service for you already so you can simply run it. 1 2 3 sudo systemctl start grafana-server sudo systemctl enable grafana-server sudo systemctl status grafana-server You can then login on port 3000 ! Click the cog icon to import Prometheus data and you\u2019re good to go; create dashboards and alerts, etc.","title":"Grafana"},{"location":"deploy/grafana/#grafana","text":"Prometheus does an amazing job of collecting metrics but the dashboard and tracking is provides is rather ugly. Grafana on the other make for great monitoring, dashboards, alerts, etc. Moreover it connects very easily with Prometheus; hence you leave prometheus collect the metrics and have Grafana read those metrics to provide monitoring.","title":"Grafana"},{"location":"deploy/grafana/#install","text":"We can follow the official documentation to install grafana on Ubuntu 20 . 1 2 3 4 5 6 7 8 sudo apt-get install -y apt-transport-https sudo apt-get install -y software-properties-common wget wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add - echo \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list sudo apt-get update sudo apt-get install grafana","title":"Install"},{"location":"deploy/grafana/#run","text":"Grafana actually create the service for you already so you can simply run it. 1 2 3 sudo systemctl start grafana-server sudo systemctl enable grafana-server sudo systemctl status grafana-server You can then login on port 3000 ! Click the cog icon to import Prometheus data and you\u2019re good to go; create dashboards and alerts, etc.","title":"Run"},{"location":"deploy/prometheus/","text":"Prometheus \u00b6 Serving metrics with titan is only part of the story. Once those are served one must set up and deploy Prometheus so it can scrape those results. There are a few ways in which Prometheus can be deployed. The easiest I find is simply to install the binary and run is a service, this way it automatically restarts when the server reboots, etc. Installation \u00b6 Below we download the zipped latest release (at the time of writing this v2.23.0). 1 2 3 4 wget https://github.com/prometheus/prometheus/releases/download/v2.23.0/prometheus-2.23.0.linux-amd64.tar.gz tar xvfz prometheus-2.23.0.linux-amd64.tar.gz mv prometheus-2.23.0.linux-amd64 prometheus This downloads, unzips the files necessary to run Prometheus, then renames the directory from prometheus-2.23.0.linux-amd64 to prometheus . Next you can move into that directory and run Prometheus manually to make sure all works well. 1 2 cd ./prometheus ./prometheus This should run prometheus and make it available on port 9090 by default and you should be able to see prometheus running at <server-ip>:9090 . If you do not make sure that port 9090 is open on your server. The prometheus.yml file contains the \u201ctargets\u201d to scrape, that is the plumber APIs and shiny applications to scrape the metrics. Service \u00b6 We can create a new service to easily have Prometheus run in the background, restart when needed, etc. 1 vi /etc/systemd/system/prometheus.service In that service place the following. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [Unit] Description=Prometheus Documentation=https://prometheus.io/docs/introduction/overview/ Wants=network-online.target After=network-online.target [Service] Type=simple User=root ExecReload=/bin/kill -HUP \\$MAINPID ExecStart=/prometheus/prometheus \\ --config.file=/prometheus/prometheus.yml \\ --web.enable-lifecycle SyslogIdentifier=prometheus Restart=always [Install] WantedBy=multi-user.target This essentially will create a new service, very similar to shiny-server. Note the use of --web.enable-lifecycle to reload the configuration file by executing a POST query. This creates the service it can then be run after reloading the daemon. 1 2 3 sudo systemctl daemon-reload sudo systemctl start prometheus sudo systemctl enable prometheus Running sudo systemctl status prometheus will show whether the service is running correctly. Configuration file \u00b6 We have yet to explore the configuration file. Below is an example of a job to scrape a shiny application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 scrape_configs: - job_name: my-application scheme: 'http' targets: ['shiny-server.com'] metrics_path: 'myapp/metrics' basic_auth: username: titan password: secret2020! - job_name: my-other-application scheme: 'http' targets: ['shiny-server.com'] metrics_path: 'anotherApp/metrics' basic_auth: username: myName password: securePassword Reload Configuration \u00b6 Once changes have been made to the configuration we must tell prometheus to reload it. Since we set the flag --web.enable-lifecycle when launching the Prometheus service we can simply make a POST request to the /-/reload endpoint of Prometheus to reload the configuration file. 1 curl -X POST http://localhost:9090/-/reload There is a convenience function in titan to do so from R. 1 reloadConfig ( \"http://localhost:9090\" ) From there onwards it\u2019s just a matter of adding jobs to the configuration file and reload it. Happy tracking!","title":"Prometheus"},{"location":"deploy/prometheus/#prometheus","text":"Serving metrics with titan is only part of the story. Once those are served one must set up and deploy Prometheus so it can scrape those results. There are a few ways in which Prometheus can be deployed. The easiest I find is simply to install the binary and run is a service, this way it automatically restarts when the server reboots, etc.","title":"Prometheus"},{"location":"deploy/prometheus/#installation","text":"Below we download the zipped latest release (at the time of writing this v2.23.0). 1 2 3 4 wget https://github.com/prometheus/prometheus/releases/download/v2.23.0/prometheus-2.23.0.linux-amd64.tar.gz tar xvfz prometheus-2.23.0.linux-amd64.tar.gz mv prometheus-2.23.0.linux-amd64 prometheus This downloads, unzips the files necessary to run Prometheus, then renames the directory from prometheus-2.23.0.linux-amd64 to prometheus . Next you can move into that directory and run Prometheus manually to make sure all works well. 1 2 cd ./prometheus ./prometheus This should run prometheus and make it available on port 9090 by default and you should be able to see prometheus running at <server-ip>:9090 . If you do not make sure that port 9090 is open on your server. The prometheus.yml file contains the \u201ctargets\u201d to scrape, that is the plumber APIs and shiny applications to scrape the metrics.","title":"Installation"},{"location":"deploy/prometheus/#service","text":"We can create a new service to easily have Prometheus run in the background, restart when needed, etc. 1 vi /etc/systemd/system/prometheus.service In that service place the following. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [Unit] Description=Prometheus Documentation=https://prometheus.io/docs/introduction/overview/ Wants=network-online.target After=network-online.target [Service] Type=simple User=root ExecReload=/bin/kill -HUP \\$MAINPID ExecStart=/prometheus/prometheus \\ --config.file=/prometheus/prometheus.yml \\ --web.enable-lifecycle SyslogIdentifier=prometheus Restart=always [Install] WantedBy=multi-user.target This essentially will create a new service, very similar to shiny-server. Note the use of --web.enable-lifecycle to reload the configuration file by executing a POST query. This creates the service it can then be run after reloading the daemon. 1 2 3 sudo systemctl daemon-reload sudo systemctl start prometheus sudo systemctl enable prometheus Running sudo systemctl status prometheus will show whether the service is running correctly.","title":"Service"},{"location":"deploy/prometheus/#configuration-file","text":"We have yet to explore the configuration file. Below is an example of a job to scrape a shiny application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 scrape_configs: - job_name: my-application scheme: 'http' targets: ['shiny-server.com'] metrics_path: 'myapp/metrics' basic_auth: username: titan password: secret2020! - job_name: my-other-application scheme: 'http' targets: ['shiny-server.com'] metrics_path: 'anotherApp/metrics' basic_auth: username: myName password: securePassword","title":"Configuration file"},{"location":"deploy/prometheus/#reload-configuration","text":"Once changes have been made to the configuration we must tell prometheus to reload it. Since we set the flag --web.enable-lifecycle when launching the Prometheus service we can simply make a POST request to the /-/reload endpoint of Prometheus to reload the configuration file. 1 curl -X POST http://localhost:9090/-/reload There is a convenience function in titan to do so from R. 1 reloadConfig ( \"http://localhost:9090\" ) From there onwards it\u2019s just a matter of adding jobs to the configuration file and reload it. Happy tracking!","title":"Reload Configuration"},{"location":"guide/ambiorix/","text":"Ambiorix \u00b6 Then again, the metrics themselves and their usage does not differ, only the way the metrics are served. With ambiorix , create a new get method on the /metrics endpoint, and have it return the results of renderMetrics . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 library ( titan ) library ( ambiorix ) # basic counter c <- Counter $ new ( name = \"visits_total\" , help = \"Total visit to the site\" , labels = \"path\" ) app <- Ambiorix $ new () app $ get ( \"/\" , function ( req , res ){ c $ inc ( path = \"/\" ) res $ send ( \"Using {titan} with {ambiorix}!\" ) }) app $ get ( \"/about\" , function ( req , res ){ c $ inc ( path = \"/about\" ) res $ send ( \"About {titan} and {ambiorix}!\" ) }) app $ get ( \"/metrics\" , function ( req , res ){ res $ text ( renderMetrics ()) }) app $ start ()","title":"Ambiorix"},{"location":"guide/ambiorix/#ambiorix","text":"Then again, the metrics themselves and their usage does not differ, only the way the metrics are served. With ambiorix , create a new get method on the /metrics endpoint, and have it return the results of renderMetrics . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 library ( titan ) library ( ambiorix ) # basic counter c <- Counter $ new ( name = \"visits_total\" , help = \"Total visit to the site\" , labels = \"path\" ) app <- Ambiorix $ new () app $ get ( \"/\" , function ( req , res ){ c $ inc ( path = \"/\" ) res $ send ( \"Using {titan} with {ambiorix}!\" ) }) app $ get ( \"/about\" , function ( req , res ){ c $ inc ( path = \"/about\" ) res $ send ( \"About {titan} and {ambiorix}!\" ) }) app $ get ( \"/metrics\" , function ( req , res ){ res $ text ( renderMetrics ()) }) app $ start ()","title":"Ambiorix"},{"location":"guide/authentication/","text":"Authentication \u00b6 If you run shiny applications and plumber APIs on a secure server behind a proxy then you probably do not need authentication. If said applications are exposed publicly then you might want to use authentication so that the metrics are not publicly accessible. Prometheus supports basic authentication , by default it does not use any, but optionally a user and password can be specified in the prometheus.yml so that these are used when hitting the /metrics endpoint. This means the endpoint needs to be secured with the same user and password. Securing the endpoint \u00b6 Use the helper function generateBasicAuth to create a token based on a username and password. Note that the function throws a warning: this function should not be left as-is in your application or plumber API. 1 2 3 4 generateBasicAuth ( username = \"titan\" , password = \"secret2020!\" ) 1 2 3 [1] \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" Warning message: Do not deploy or share this Danger Do not use generateBasicAuth in your application or use the token in plain text: it exposes the password. Once the authentication token is created it can be used in setAuthentication . The token should not be displayed in the code as in the example below, ideally should be an environment variable or option. 1 2 3 4 5 6 7 8 9 10 11 12 library ( titan ) library ( shiny ) setAuthentication ( \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" ) ui <- fluidPage ( h2 ( \"Secure endpoint\" ) ) server <- function ( input , output ){} titanApp ( ui , server , visits = \"visits\" ) Running the application above then visiting /metrics should display Unauthorized . Indeed, visiting the endpoint from the browser executes a simple GET request that does not feature bear the token: it is unauthorised. One can open a new R session and use the convenience function getMetrics to test the endpoint. The function optionally takes a second argument, the authentication to use. 1 2 3 4 titan :: getMetrics ( \"http://127.0.0.1:3145/\" , auth = \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" ) 1 2 3 4 5 6 7 8 Response [http://127.0.0.1:3145/metrics] Date: 2020-12-13 10:46 Status: 200 Content-Type: text/plain Size: 81 B # HELP visits Number of visits to the application # TYPE visits counter visits 1 This returns the metrics as it is, unlike via the browser, authenticated. Prometheus \u00b6 Then one can place the username and password in the job configuration. 1 2 3 4 - job_name: my-api basic_auth: username: titan password: secret2020!","title":"Authentication"},{"location":"guide/authentication/#authentication","text":"If you run shiny applications and plumber APIs on a secure server behind a proxy then you probably do not need authentication. If said applications are exposed publicly then you might want to use authentication so that the metrics are not publicly accessible. Prometheus supports basic authentication , by default it does not use any, but optionally a user and password can be specified in the prometheus.yml so that these are used when hitting the /metrics endpoint. This means the endpoint needs to be secured with the same user and password.","title":"Authentication"},{"location":"guide/authentication/#securing-the-endpoint","text":"Use the helper function generateBasicAuth to create a token based on a username and password. Note that the function throws a warning: this function should not be left as-is in your application or plumber API. 1 2 3 4 generateBasicAuth ( username = \"titan\" , password = \"secret2020!\" ) 1 2 3 [1] \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" Warning message: Do not deploy or share this Danger Do not use generateBasicAuth in your application or use the token in plain text: it exposes the password. Once the authentication token is created it can be used in setAuthentication . The token should not be displayed in the code as in the example below, ideally should be an environment variable or option. 1 2 3 4 5 6 7 8 9 10 11 12 library ( titan ) library ( shiny ) setAuthentication ( \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" ) ui <- fluidPage ( h2 ( \"Secure endpoint\" ) ) server <- function ( input , output ){} titanApp ( ui , server , visits = \"visits\" ) Running the application above then visiting /metrics should display Unauthorized . Indeed, visiting the endpoint from the browser executes a simple GET request that does not feature bear the token: it is unauthorised. One can open a new R session and use the convenience function getMetrics to test the endpoint. The function optionally takes a second argument, the authentication to use. 1 2 3 4 titan :: getMetrics ( \"http://127.0.0.1:3145/\" , auth = \"Basic dGl0YW46c2VjcmV0MjAyMCE=\" ) 1 2 3 4 5 6 7 8 Response [http://127.0.0.1:3145/metrics] Date: 2020-12-13 10:46 Status: 200 Content-Type: text/plain Size: 81 B # HELP visits Number of visits to the application # TYPE visits counter visits 1 This returns the metrics as it is, unlike via the browser, authenticated.","title":"Securing the endpoint"},{"location":"guide/authentication/#prometheus","text":"Then one can place the username and password in the job configuration. 1 2 3 4 - job_name: my-api basic_auth: username: titan password: secret2020!","title":"Prometheus"},{"location":"guide/installation/","text":"Installation \u00b6 First install the R package. Installation \u00b6 Titan is not yet available on CRAN, it can be obtained from Github . remotes You can use the remotes package. 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"devOpifex/titan\" ) pak You can use the pak package. 1 2 # install.packages(\"pak\") pak :: pkg_install ( \"devOpifex/titan\" ) devtools You can use the devtools package. 1 2 # install.packages(\"devtools\") devtools :: install_github ( \"devOpifex/titan\" )","title":"Installation"},{"location":"guide/installation/#installation","text":"First install the R package.","title":"Installation"},{"location":"guide/installation/#installation_1","text":"Titan is not yet available on CRAN, it can be obtained from Github . remotes You can use the remotes package. 1 2 # install.packages(\"remotes\") remotes :: install_github ( \"devOpifex/titan\" ) pak You can use the pak package. 1 2 # install.packages(\"pak\") pak :: pkg_install ( \"devOpifex/titan\" ) devtools You can use the devtools package. 1 2 # install.packages(\"devtools\") devtools :: install_github ( \"devOpifex/titan\" )","title":"Installation"},{"location":"guide/metrics/","text":"Metrics \u00b6 Prometheus provides four types of metrics. This document only briefly explains them, please refer to the official documentation if you need to learn more about it. Note that of the four types the most commonly used are the Counter and Gauge, the Histogram and Summary are extremely useful but used must less as they are most complicated to fully understand and set up correctly. Many client libraries of Prometheus do not even provide support for Histograms and Summaries. Basics \u00b6 Every metrics must bear a unique name and help text. Titan will not let you override a metric: make sure the names (identifiers) are unique. Note Make sure metrics bear a unique name. The help text is also mandatory as per Prometheus, it allows giving more context on the metric tracked. Optionally, metrics can also take labels, which will be detailed later in this document. All metrics are R6 classes, you can have any number of these metrics in any project. Counter \u00b6 A counter is the most basic metrics one can use. It consists of a simple counter that can only go up; the value of counters can never decrease. Tip The value of counters can only increase, use the Gauge if the value may decrease. This can be used to measure the number of times an application is visited, or the number of times an endpoint is hit: these values only ever go up. Never use Counters for values that go down, titan will not let you decrease their value. Instantiate a new counter from the Counter R6 class, give it a name and some help text, then use the method inc to increase it. You can also use the method set to set it to a specific value, again make sure that value is greater than that which the counter already holds or it will throw a warning and not set the counter to that value. 1 2 3 4 5 6 7 8 9 10 c <- Counter $ new ( name = \"btn_clicks_total\" , help = \"Total clicks on buttons\" ) c $ inc () # increase c $ inc ( 2 ) # preview the metrics previewMetrics () 1 2 3 # HELP btn_clicks_total Total clicks on buttons # TYPE btn_clicks_total counter btn_clicks_total 3 Gauge \u00b6 A gauge is very similar to the Counter at the exception that its value can decrease. Then again this is set up in similar way as the Counter, the only difference is that it also has a dec method to decrease the gauge. 1 2 3 4 5 6 7 8 9 10 g <- Gauge $ new ( name = \"current_users_total\" , help = \"Total number of users right now\" ) g $ inc ( 2 ) # increase by 2 g $ dec () # decrease by 1 # preview the metrics previewMetrics () 1 2 3 # HELP current_users_total Total number of users right now # TYPE current_users_total gauge current_users_total 1 So why would you use a Counter when a Gauge does the same and more? Because this is stored and processed differently by Prometheus. Prometheus is, at its core, a time series database and will take the metric type into account when reporting metrics. Tip Gauges and counters are fundamentally stored as different data types; do not simply switch one for the other, think thoroughly about what you measure. Histogram \u00b6 Histograms allow you to count observations and put them in configurable buckets. Start by declaring a predicate; a function which will turn put the observations into buckets. A bucket is defined using the bucket function which takes 1) the label of the bucket, and 2) the value of said bucket. Below we create a predicate that will put the observations into two buckets. It will be used to measure the time it take to process a request, if the request takes more than 3 seconds it goes into a bucket called \u201c3\u201d and if it takes over 3 seconds it will put the observation into another bucket called \u201c9\u201d. 1 2 3 4 5 6 7 8 9 10 11 # predicate to put observations into buckets. pred <- function ( value ){ v <- as.numeric ( value ) # put in bucket 3 if less than 3 seconds if ( v < 3 ) return ( bucket ( label = \"3\" , v )) # otherwise put in bucket 9 bucket ( label = \"9\" , v ) } The creation of the histogram itself differs little from other metrics: specify a unique name, help text, and pass the predicate function previously defined. 1 2 3 4 5 h <- Histogram $ new ( name = \"request_process_time\" , help = \"Time it took to process the request\" , predicate = pred ) Here, to demonstrate, we create a function to simulate a request taking time by randomly making the function sleep for between 1 and 9 seconds. When the function exits we observe the time difference between the beginning and end of the function. The observe method will internally run the predicate and place the results into buckets. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 simulateRequest <- function (){ # time at which the request starts start <- Sys.time () # when done on.exit ({ # compute time difference diff <- Sys.time () - start # observe data # will internally run `pred` h $ observe ( diff ) }) # sleep between 1 and 9 seconds Sys.sleep ( sample ( 1 : 9 , 1 )) print ( \"done\" ) } # simulate some requests simulateRequest () simulateRequest () simulateRequest () simulateRequest () # preview the metrics previewMetrics () 1 2 3 4 5 6 # HELP request_process_time Time it took to process the request # TYPE request_process_time histogram request_process_time {le=\"3\"} 2 request_process_time {le=\"9\"} 2 request_process_time_count 4 request_process_time_sum 13.0094513893127 Note that the histogram (as per Prometheus standards) also logs the count , the number of observations and the sum the sum of the observations. Above we can see that 4 requests were made that took a total of ~13 seconds; 2 of these took less than 3 seconds and the other 2 took more than that. Summary \u00b6 The Summary metric is very similar to the histogram, and works the same with Titan (predicate, etc.) except it does not count the observations in each buckets, instead it computes the sum of it. Also these buckets in Summary are called quantiles and must be between zero and one (0 < q < 1). Labels \u00b6 Labels allow adding granularity to metrics without duplicating them, they can be applied to any metric. From the official documentation : Warning Remember that every unique combination of key-value label pairs represents a new time series, which can dramatically increase the amount of data stored. Do not use labels to store dimensions with high cardinality (many different label values), such as user IDs, email addresses, or other unbounded sets of values. \u2014 Official documentation Say for instance you have a small API with three endpoints and simply want to track the number of times they get pinged. Tip All labels specified must be used or titan will throw a warning and ignore the action. Though you could create three separate Counters it might be more convenient to create a simple Counter with a label that can be set to the path that is used. 1 2 3 4 5 6 7 8 9 10 11 12 c <- Counter $ new ( name = \"api_visits_total\" , help = \"Total API visits\" , labels = \"endpoint\" ) c $ inc ( 1 , endpoint = \"/\" ) c $ inc ( 1 , endpoint = \"/count\" ) c $ inc ( 1 , endpoint = \"/home\" ) c $ inc ( 2 , endpoint = \"/home\" ) previewMetrics () 1 2 3 4 5 # HELP api_visits_total Total API visits # TYPE api_visits_total counter api_visits_total {endpoint=\"/\"} 1 api_visits_total {endpoint=\"/count\"} 1 api_visits_total {endpoint=\"/home\"} 3 If you use labels you must specify all of the labels every time you change the value of the metric ( inc , dec , set , observe ). Otherwise titan throws a warning and ignores the action. Error Since all labels must be specified this will fail. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 c <- Counter $ new ( \"btn_clicks_total\" , \"Total button clicks\" , labels = c ( \"color\" , \"module\" ) ) # fails # missing all labels c $ inc () # fails # missing one label c $ inc ( color = \"blue\" ) # fails # missing another label c $ inc ( module = \"homepage\" ) # Succeeds # both labels present c $ inc ( color = \"blue\" , module = \"homepage\" )","title":"Metrics"},{"location":"guide/metrics/#metrics","text":"Prometheus provides four types of metrics. This document only briefly explains them, please refer to the official documentation if you need to learn more about it. Note that of the four types the most commonly used are the Counter and Gauge, the Histogram and Summary are extremely useful but used must less as they are most complicated to fully understand and set up correctly. Many client libraries of Prometheus do not even provide support for Histograms and Summaries.","title":"Metrics"},{"location":"guide/metrics/#basics","text":"Every metrics must bear a unique name and help text. Titan will not let you override a metric: make sure the names (identifiers) are unique. Note Make sure metrics bear a unique name. The help text is also mandatory as per Prometheus, it allows giving more context on the metric tracked. Optionally, metrics can also take labels, which will be detailed later in this document. All metrics are R6 classes, you can have any number of these metrics in any project.","title":"Basics"},{"location":"guide/metrics/#counter","text":"A counter is the most basic metrics one can use. It consists of a simple counter that can only go up; the value of counters can never decrease. Tip The value of counters can only increase, use the Gauge if the value may decrease. This can be used to measure the number of times an application is visited, or the number of times an endpoint is hit: these values only ever go up. Never use Counters for values that go down, titan will not let you decrease their value. Instantiate a new counter from the Counter R6 class, give it a name and some help text, then use the method inc to increase it. You can also use the method set to set it to a specific value, again make sure that value is greater than that which the counter already holds or it will throw a warning and not set the counter to that value. 1 2 3 4 5 6 7 8 9 10 c <- Counter $ new ( name = \"btn_clicks_total\" , help = \"Total clicks on buttons\" ) c $ inc () # increase c $ inc ( 2 ) # preview the metrics previewMetrics () 1 2 3 # HELP btn_clicks_total Total clicks on buttons # TYPE btn_clicks_total counter btn_clicks_total 3","title":"Counter"},{"location":"guide/metrics/#gauge","text":"A gauge is very similar to the Counter at the exception that its value can decrease. Then again this is set up in similar way as the Counter, the only difference is that it also has a dec method to decrease the gauge. 1 2 3 4 5 6 7 8 9 10 g <- Gauge $ new ( name = \"current_users_total\" , help = \"Total number of users right now\" ) g $ inc ( 2 ) # increase by 2 g $ dec () # decrease by 1 # preview the metrics previewMetrics () 1 2 3 # HELP current_users_total Total number of users right now # TYPE current_users_total gauge current_users_total 1 So why would you use a Counter when a Gauge does the same and more? Because this is stored and processed differently by Prometheus. Prometheus is, at its core, a time series database and will take the metric type into account when reporting metrics. Tip Gauges and counters are fundamentally stored as different data types; do not simply switch one for the other, think thoroughly about what you measure.","title":"Gauge"},{"location":"guide/metrics/#histogram","text":"Histograms allow you to count observations and put them in configurable buckets. Start by declaring a predicate; a function which will turn put the observations into buckets. A bucket is defined using the bucket function which takes 1) the label of the bucket, and 2) the value of said bucket. Below we create a predicate that will put the observations into two buckets. It will be used to measure the time it take to process a request, if the request takes more than 3 seconds it goes into a bucket called \u201c3\u201d and if it takes over 3 seconds it will put the observation into another bucket called \u201c9\u201d. 1 2 3 4 5 6 7 8 9 10 11 # predicate to put observations into buckets. pred <- function ( value ){ v <- as.numeric ( value ) # put in bucket 3 if less than 3 seconds if ( v < 3 ) return ( bucket ( label = \"3\" , v )) # otherwise put in bucket 9 bucket ( label = \"9\" , v ) } The creation of the histogram itself differs little from other metrics: specify a unique name, help text, and pass the predicate function previously defined. 1 2 3 4 5 h <- Histogram $ new ( name = \"request_process_time\" , help = \"Time it took to process the request\" , predicate = pred ) Here, to demonstrate, we create a function to simulate a request taking time by randomly making the function sleep for between 1 and 9 seconds. When the function exits we observe the time difference between the beginning and end of the function. The observe method will internally run the predicate and place the results into buckets. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 simulateRequest <- function (){ # time at which the request starts start <- Sys.time () # when done on.exit ({ # compute time difference diff <- Sys.time () - start # observe data # will internally run `pred` h $ observe ( diff ) }) # sleep between 1 and 9 seconds Sys.sleep ( sample ( 1 : 9 , 1 )) print ( \"done\" ) } # simulate some requests simulateRequest () simulateRequest () simulateRequest () simulateRequest () # preview the metrics previewMetrics () 1 2 3 4 5 6 # HELP request_process_time Time it took to process the request # TYPE request_process_time histogram request_process_time {le=\"3\"} 2 request_process_time {le=\"9\"} 2 request_process_time_count 4 request_process_time_sum 13.0094513893127 Note that the histogram (as per Prometheus standards) also logs the count , the number of observations and the sum the sum of the observations. Above we can see that 4 requests were made that took a total of ~13 seconds; 2 of these took less than 3 seconds and the other 2 took more than that.","title":"Histogram"},{"location":"guide/metrics/#summary","text":"The Summary metric is very similar to the histogram, and works the same with Titan (predicate, etc.) except it does not count the observations in each buckets, instead it computes the sum of it. Also these buckets in Summary are called quantiles and must be between zero and one (0 < q < 1).","title":"Summary"},{"location":"guide/metrics/#labels","text":"Labels allow adding granularity to metrics without duplicating them, they can be applied to any metric. From the official documentation : Warning Remember that every unique combination of key-value label pairs represents a new time series, which can dramatically increase the amount of data stored. Do not use labels to store dimensions with high cardinality (many different label values), such as user IDs, email addresses, or other unbounded sets of values. \u2014 Official documentation Say for instance you have a small API with three endpoints and simply want to track the number of times they get pinged. Tip All labels specified must be used or titan will throw a warning and ignore the action. Though you could create three separate Counters it might be more convenient to create a simple Counter with a label that can be set to the path that is used. 1 2 3 4 5 6 7 8 9 10 11 12 c <- Counter $ new ( name = \"api_visits_total\" , help = \"Total API visits\" , labels = \"endpoint\" ) c $ inc ( 1 , endpoint = \"/\" ) c $ inc ( 1 , endpoint = \"/count\" ) c $ inc ( 1 , endpoint = \"/home\" ) c $ inc ( 2 , endpoint = \"/home\" ) previewMetrics () 1 2 3 4 5 # HELP api_visits_total Total API visits # TYPE api_visits_total counter api_visits_total {endpoint=\"/\"} 1 api_visits_total {endpoint=\"/count\"} 1 api_visits_total {endpoint=\"/home\"} 3 If you use labels you must specify all of the labels every time you change the value of the metric ( inc , dec , set , observe ). Otherwise titan throws a warning and ignores the action. Error Since all labels must be specified this will fail. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 c <- Counter $ new ( \"btn_clicks_total\" , \"Total button clicks\" , labels = c ( \"color\" , \"module\" ) ) # fails # missing all labels c $ inc () # fails # missing one label c $ inc ( color = \"blue\" ) # fails # missing another label c $ inc ( module = \"homepage\" ) # Succeeds # both labels present c $ inc ( color = \"blue\" , module = \"homepage\" )","title":"Labels"},{"location":"guide/plumber/","text":"Plumber APIs \u00b6 The metrics and how they are used never changes, the only thing that changes across projects is how the metrics are served. Create the plumber API as you normally would. 1 2 3 4 5 6 7 8 9 10 11 12 13 #* Increment a counter #* @get / function () { return ( \"Hello titan!\" ) } #* Plot a histogram #* @serializer png #* @get /plot function () { rand <- rnorm ( 100 ) hist ( rand ) } Then use the function prTitan as you would normally use pr . This example here will serve the metrics but none are currently tracked. 1 2 3 4 library ( plumber ) titan :: prTitan ( \"file.R\" ) %>% pr_run () As with shiny, titan provides an out-of-the-box metric to track: latency . As with shiny ( titanApp ), the latency argument defaults to NULL meaning this is not being tracked, to turn on that tracking pass it a character string: the name of the metric. Latency tracks the time it takes for the API to serve requests. This is tracked with a Histogram that uses predefined bucket s that put the request time in milliseconds in various bins (e.g.: 300 milliseconds, 600 milliseconds, etc.). It also uses some labels to track: The method used for the request, e.g.: GET or POST . The path of the request, e.g.: /plot . The status of the request, e.g.: 200 or 404 . 1 2 3 4 library ( plumber ) titan :: prTitan ( \"file.R\" , latency = \"latency\" ) %>% pr_run ()","title":"Plumber"},{"location":"guide/plumber/#plumber-apis","text":"The metrics and how they are used never changes, the only thing that changes across projects is how the metrics are served. Create the plumber API as you normally would. 1 2 3 4 5 6 7 8 9 10 11 12 13 #* Increment a counter #* @get / function () { return ( \"Hello titan!\" ) } #* Plot a histogram #* @serializer png #* @get /plot function () { rand <- rnorm ( 100 ) hist ( rand ) } Then use the function prTitan as you would normally use pr . This example here will serve the metrics but none are currently tracked. 1 2 3 4 library ( plumber ) titan :: prTitan ( \"file.R\" ) %>% pr_run () As with shiny, titan provides an out-of-the-box metric to track: latency . As with shiny ( titanApp ), the latency argument defaults to NULL meaning this is not being tracked, to turn on that tracking pass it a character string: the name of the metric. Latency tracks the time it takes for the API to serve requests. This is tracked with a Histogram that uses predefined bucket s that put the request time in milliseconds in various bins (e.g.: 300 milliseconds, 600 milliseconds, etc.). It also uses some labels to track: The method used for the request, e.g.: GET or POST . The path of the request, e.g.: /plot . The status of the request, e.g.: 200 or 404 . 1 2 3 4 library ( plumber ) titan :: prTitan ( \"file.R\" , latency = \"latency\" ) %>% pr_run ()","title":"Plumber APIs"},{"location":"guide/shiny/","text":"Shiny Basics \u00b6 In this wee vignette we give just basic examples of how to use titan in shiny applications. Helpers \u00b6 Titan allows easily tracking some interactions by default, saving you the trouble of setting up metrics. Starting from the (very) basic shiny application below which simply prints text to the console at the click of a button. 1 2 3 4 5 6 7 8 9 10 11 12 13 library ( shiny ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { cat ( \"Logging one click\\n\" ) }) } shinyApp ( ui , server ) We will see how to define custom metrics later but before we do so, there are a number out-of-the-box (optional) metrics that titan provides: Inputs: Tracks all input messages sent from the front-end to the server to better understand which are most used. This is handled with a counter that uses the name of the inputs as labels . Visits: Tracks the total number of visits to the shiny application with a counter. Concurrent: Tracks the number of concurrent users currently on the application with a gauge. Duration: Tracks the session duration; the time (in seconds) users stay and interact with the application. As mentioned, all of those are optional (off by default) but whether you use the defaults presented here and/or your custom metrics you must use titanApp to launch the application. This function takes the same inputs as shinyApp and more. The arguments inputs , visits , concurrent , and duration , which all default to NULL meaning they are not being tracked. To track those metrics one must pass it a character string defining the name of the metric. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 library ( titan ) library ( shiny ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { cat ( \"Logging one click\\n\" ) }) } # use titanApp titanApp ( ui , server , inputs = \"inputs\" , visits = \"visits\" , concurrent = \"concurrent\" , duration = \"duration\" ) Danger On a large application tracking all inputs can create a lot of data. Counter \u00b6 Let\u2019s use titan to track the number of clicks on this button rather than use the defaults provided by titan. We can use a counter since the number of clicks can only increase over time. Load the titan package then create the counter. Note that it is created outside the application, as it only needs to be created once, placing it in the server would recreate it every time. Though this should not be an issue as titan prevents you from overwriting an already created counter it is best to avoid it. In the observer we increment the counter, then note that we launch the application with titanApp and not shinyApp , it works the exact same way but exposes the metrics. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 library ( titan ) library ( shiny ) # create the counter c <- Counter $ new ( name = \"btn_click_total\" , help = \"Number of clicks of the button\" ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { c $ inc () cat ( \"Logging one click\\n\" ) }) } # use titanApp titanApp ( ui , server ) Histogram \u00b6 We can also use a histogram to track the performances of a particularly long request. Say for instance, that the application, at the click of a button, makes a relatively large request to a database or runs a time consuming model, surely we\u2019d like to track that. We can build a histogram to track the time it takes to run that process. We\u2019ll use the histogram to put the time it takes into three bins: Less than 3 seconds Between 3 and 6 seconds 6 Seconds and more 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 library ( titan ) library ( shiny ) classify <- function ( value ){ v <- as.numeric ( value ) if ( v < 3 ) return ( bucket ( \"0-3\" , v )) else if ( v > 3 && v < 6 ) return ( bucket ( \"3-6\" , v )) else return ( bucket ( \"9\" , v )) } hist <- Histogram $ new ( \"process_time\" , \"Lengthy process timing\" , predicate = classify ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { start <- Sys.time () on.exit ({ diff <- Sys.time () - start hist $ observe ( diff ) }) Sys.sleep ( sample ( 1 : 9 , 1 )) cat ( \"Done with process\\n\" ) }) } titanApp ( ui , server ) Gauge \u00b6 You could also create a gauge to track the current number of visitors on the application using a Gauge. It\u2019s as simple as initialising the Gauge and increasing it by one every time the server fires. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 library ( shiny ) g <- Gauge $ new ( \"visitors_total\" , \"Current number of visitors\" ) ui <- fluidPage ( h1 ( \"Hello\" ) ) server <- function ( input , output ){ g $ inc () } titanApp ( ui , server )","title":"Shiny"},{"location":"guide/shiny/#shiny-basics","text":"In this wee vignette we give just basic examples of how to use titan in shiny applications.","title":"Shiny Basics"},{"location":"guide/shiny/#helpers","text":"Titan allows easily tracking some interactions by default, saving you the trouble of setting up metrics. Starting from the (very) basic shiny application below which simply prints text to the console at the click of a button. 1 2 3 4 5 6 7 8 9 10 11 12 13 library ( shiny ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { cat ( \"Logging one click\\n\" ) }) } shinyApp ( ui , server ) We will see how to define custom metrics later but before we do so, there are a number out-of-the-box (optional) metrics that titan provides: Inputs: Tracks all input messages sent from the front-end to the server to better understand which are most used. This is handled with a counter that uses the name of the inputs as labels . Visits: Tracks the total number of visits to the shiny application with a counter. Concurrent: Tracks the number of concurrent users currently on the application with a gauge. Duration: Tracks the session duration; the time (in seconds) users stay and interact with the application. As mentioned, all of those are optional (off by default) but whether you use the defaults presented here and/or your custom metrics you must use titanApp to launch the application. This function takes the same inputs as shinyApp and more. The arguments inputs , visits , concurrent , and duration , which all default to NULL meaning they are not being tracked. To track those metrics one must pass it a character string defining the name of the metric. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 library ( titan ) library ( shiny ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { cat ( \"Logging one click\\n\" ) }) } # use titanApp titanApp ( ui , server , inputs = \"inputs\" , visits = \"visits\" , concurrent = \"concurrent\" , duration = \"duration\" ) Danger On a large application tracking all inputs can create a lot of data.","title":"Helpers"},{"location":"guide/shiny/#counter","text":"Let\u2019s use titan to track the number of clicks on this button rather than use the defaults provided by titan. We can use a counter since the number of clicks can only increase over time. Load the titan package then create the counter. Note that it is created outside the application, as it only needs to be created once, placing it in the server would recreate it every time. Though this should not be an issue as titan prevents you from overwriting an already created counter it is best to avoid it. In the observer we increment the counter, then note that we launch the application with titanApp and not shinyApp , it works the exact same way but exposes the metrics. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 library ( titan ) library ( shiny ) # create the counter c <- Counter $ new ( name = \"btn_click_total\" , help = \"Number of clicks of the button\" ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { c $ inc () cat ( \"Logging one click\\n\" ) }) } # use titanApp titanApp ( ui , server )","title":"Counter"},{"location":"guide/shiny/#histogram","text":"We can also use a histogram to track the performances of a particularly long request. Say for instance, that the application, at the click of a button, makes a relatively large request to a database or runs a time consuming model, surely we\u2019d like to track that. We can build a histogram to track the time it takes to run that process. We\u2019ll use the histogram to put the time it takes into three bins: Less than 3 seconds Between 3 and 6 seconds 6 Seconds and more 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 library ( titan ) library ( shiny ) classify <- function ( value ){ v <- as.numeric ( value ) if ( v < 3 ) return ( bucket ( \"0-3\" , v )) else if ( v > 3 && v < 6 ) return ( bucket ( \"3-6\" , v )) else return ( bucket ( \"9\" , v )) } hist <- Histogram $ new ( \"process_time\" , \"Lengthy process timing\" , predicate = classify ) ui <- fluidPage ( actionButton ( \"click\" , \"click me!\" ) ) server <- function ( input , output ){ observeEvent ( input $ click , { start <- Sys.time () on.exit ({ diff <- Sys.time () - start hist $ observe ( diff ) }) Sys.sleep ( sample ( 1 : 9 , 1 )) cat ( \"Done with process\\n\" ) }) } titanApp ( ui , server )","title":"Histogram"},{"location":"guide/shiny/#gauge","text":"You could also create a gauge to track the current number of visitors on the application using a Gauge. It\u2019s as simple as initialising the Gauge and increasing it by one every time the server fires. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 library ( shiny ) g <- Gauge $ new ( \"visitors_total\" , \"Current number of visitors\" ) ui <- fluidPage ( h1 ( \"Hello\" ) ) server <- function ( input , output ){ g $ inc () } titanApp ( ui , server )","title":"Gauge"},{"location":"meta/changelog/","text":"titan 2.0.0 \u00b6 Refactor entire source code. Better performances. Documentation site. Support for authentication. titan 1.0.0 \u00b6 Initial version.","title":"Changelog"},{"location":"meta/changelog/#titan-200","text":"Refactor entire source code. Better performances. Documentation site. Support for authentication.","title":"titan 2.0.0"},{"location":"meta/changelog/#titan-100","text":"Initial version.","title":"titan 1.0.0"},{"location":"meta/contribute/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.","title":"Contribute"},{"location":"meta/contribute/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"meta/contribute/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"meta/contribute/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"meta/contribute/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"meta/contribute/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"meta/contribute/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"meta/contribute/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"meta/contribute/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"meta/contribute/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"meta/contribute/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"meta/contribute/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"meta/contribute/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"meta/license/","text":"GNU Affero General Public License \u00b6 Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. < https://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble \u00b6 The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS \u00b6 0. Definitions. \u00b6 \u201cThis License\u201d refers to version 3 of the GNU Affero General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. \u00b6 The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. \u00b6 All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law. \u00b6 No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. \u00b6 You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. \u00b6 You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. \u00b6 You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u00b6 \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. \u00b6 You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. \u00b6 You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. \u00b6 Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. \u00b6 A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u2019 Freedom. \u00b6 If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. \u00b6 Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. \u00b6 The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. \u00b6 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. \u00b6 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. \u00b6 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs \u00b6 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"License"},{"location":"meta/license/#gnu-affero-general-public-license","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. < https://fsf.org/ > Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU Affero General Public License"},{"location":"meta/license/#preamble","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"meta/license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"meta/license/#0-definitions","text":"\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License. \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations. To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work. A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program. To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"meta/license/#1-source-code","text":"The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work. A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"meta/license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"meta/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"meta/license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"meta/license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"meta/license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"meta/license/#7-additional-terms","text":"\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"meta/license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"meta/license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"meta/license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"meta/license/#11-patents","text":"A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d. A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"meta/license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"meta/license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","title":"13. Remote Network Interaction; Use with the GNU General Public License."},{"location":"meta/license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"meta/license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"meta/license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"meta/license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"meta/license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"How to Apply These Terms to Your New Programs"}]}